package tmpl

import (
  "fmt"
  "strings"
  "github.com/AlbinoDrought/creamy-videos/videostore"
)

// formatters:

func classes(c ...string) string {
  return strings.Join(c, " ")
}

func classIf(name string, condition bool) string {
  if condition {
    return name
  }
  return ""
}

func videoURL(video videostore.Video) templ.SafeURL {
  return templ.SafeURL(fmt.Sprintf("/watch/%v", video.ID))
}

// components:

templ sortDropdown(direction string, fluid bool) {
  <select name="sort" class={ classes("sort-dropdown", classIf("fluid", fluid)) } onchange="window.cvSubmitNearestForm(this)">
    <option value="newest" selected?={ direction == "newest" }>Sort: Newest</option>
    <option value="oldest" selected?={ direction == "oldest" }>Sort: Oldest</option>
    <option value="az" selected?={ direction == "az" }>Sort: A-Z</option>
    <option value="za" selected?={ direction == "za" }>Sort: Z-A</option>
  </select>
}

templ videoThumbnail(pug PublicURLGenerator, video videostore.Video) {
  <a href={ videoURL(video) } class="ui fluid video card" aria-label="Video Thumbnail">
    <div class="ui image">
      <img src={ pug(video.Thumbnail) } />
    </div>
    <div class="content">
      <span class="header">{ video.Title }</span>
    </div>
  </a>
}

templ videoGrid(pug PublicURLGenerator, videos []videostore.Video) {
  <div class="ui stackable grid">
    for _, video := range videos {
      <div class="four wide column">
        @videoThumbnail(pug, video)
      </div>
    }
  </div>
}

// wrappers:

templ page(title string, description string) {
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
      <meta name="viewport" content="width=device-width,initial-scale=1.0" />
      <meta name="description" content={ description } />
      <meta name="theme-color" content="#1b1b1b" />
      <link rel="icon" href="/favicon.ico" />
      <title>{ title } | creamy-videos</title>
      <link href="/css/semantic.min.0.css" rel="stylesheet" />
      <link href="/css/main.0.css" rel="stylesheet" />
      <script defer src="/js/main.0.js" type="text/javascript" />
    </head>
    <body>
      { children... }
    </body>
  </html>
}

templ app(state AppState) {
  <div id="app">
    <div class="ui fixed inverted main menu">
      <div class="ui container">
        <a href="/" class="header item">
          <img class="logo" src="/img/icon.png" />
          Creamy Videos
        </a>
        <a href="/" class="item">
          Home
        </a>
        if !state.ReadOnly {
          <a href="/upload" class="item">
            Upload
          </a>
        }
        <form method="GET" action="/search"  class="not-small right menu">
          if state.Sortable {
            <div class="borderless item">
              @sortDropdown(state.SortDirection, false)
            </div>
          }

          <div class="borderless item">
            <div class="search-input ui inverted transparent icon input">
              <input
                aria-label="Search"
                type="text"
                placeholder="Search..."
                name="text"
                value={ state.SearchText }
              />
                <button type="submit">
                  <i class="search link icon"></i>
                </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <form method="GET" action="/search">
      <div class="ui only-small fluid fixed inverted menu search">
        <div class="borderless item">
          <div class="search-input ui inverted transparent icon input">
            <input
              type="text"
              placeholder="Search..."
              name="text"
              value={ state.SearchText }
            />
            <button type="submit">
              <i class="search link icon"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="ui main container only-small">
        if state.Sortable {
          <div class="only-small mobile-sort-controls">
            @sortDropdown(state.SortDirection, true)
          </div>
        }
      </div>
    </form>

    <div class="ui main container">
      { children... }
    </div>
  </div>
}


// pages:

templ Home(state AppState, videos []videostore.Video) {
  @page("Home", "The creamiest selfhosted tubesite") {
    @app(state) {
      @videoGrid(state.PUG, videos)
    }
  }
}

templ Search(state AppState, videos []videostore.Video) {
  @page("Search: " + state.SearchText, "The creamiest selfhosted tubesite") {
    @app(state) {
      @videoGrid(state.PUG, videos)
    }
  }
}