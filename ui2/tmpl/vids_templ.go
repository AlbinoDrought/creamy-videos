// Code generated by templ@v0.2.334 DO NOT EDIT.

package tmpl

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/AlbinoDrought/creamy-videos/videostore"
	"net/url"
	"strings"
)

// formatters:

func classes(c ...string) string {
	return strings.Join(c, " ")
}

func classIf(name string, condition bool) string {
	if condition {
		return name
	}
	return ""
}

func videoURL(video videostore.Video) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/watch/%v", video.ID))
}

func videoEditURL(video videostore.Video) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/edit/%v", video.ID))
}

func videoDeleteURL(video videostore.Video) templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/delete/%v", video.ID))
}

func tagSearchURL(tag string) templ.SafeURL {
	return templ.SafeURL("/search?tags=" + url.QueryEscape(tag))
}

func plural(count int, singular string, plural string) string {
	if count == 1 {
		return singular
	}
	return plural
}

// components:

func sortDropdown(direction string, fluid bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_2 = []any{classes("sort-dropdown", classIf("fluid", fluid))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<select name=\"sort\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" onchange=\"window.cvSubmitNearestForm(this)\"><option value=\"newest\"")
		if err != nil {
			return err
		}
		if direction == "newest" {
			_, err = templBuffer.WriteString(" selected")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		var_3 := `Sort: Newest`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"oldest\"")
		if err != nil {
			return err
		}
		if direction == "oldest" {
			_, err = templBuffer.WriteString(" selected")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		var_4 := `Sort: Oldest`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"az\"")
		if err != nil {
			return err
		}
		if direction == "az" {
			_, err = templBuffer.WriteString(" selected")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		var_5 := `Sort: A-Z`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"za\"")
		if err != nil {
			return err
		}
		if direction == "za" {
			_, err = templBuffer.WriteString(" selected")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		var_6 := `Sort: Z-A`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option></select>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func videoThumbnail(pug PublicURLGenerator, video videostore.Video) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<a cv-boost=\"true\" href=\"")
		if err != nil {
			return err
		}
		var var_8 templ.SafeURL = videoURL(video)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_8)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"ui fluid video card\" aria-label=\"Video Thumbnail\"><div class=\"ui image\"><img src=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(pug(video.Thumbnail)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"content\"><span class=\"header\">")
		if err != nil {
			return err
		}
		var var_9 string = video.Title
		_, err = templBuffer.WriteString(templ.EscapeString(var_9))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></div></a>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func videoGrid(pug PublicURLGenerator, videos []videostore.Video) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_10 := templ.GetChildren(ctx)
		if var_10 == nil {
			var_10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"ui stackable grid\">")
		if err != nil {
			return err
		}
		for _, video := range videos {
			_, err = templBuffer.WriteString("<div class=\"four wide column\">")
			if err != nil {
				return err
			}
			err = videoThumbnail(pug, video).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func pagingLinks(p Paging) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_11 := templ.GetChildren(ctx)
		if var_11 == nil {
			var_11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"ui pagination menu\">")
		if err != nil {
			return err
		}
		for _, page := range genPages(p) {
			if page.Disabled {
				_, err = templBuffer.WriteString("<div class=\"disabled item\">")
				if err != nil {
					return err
				}
				var var_12 string = page.Page
				_, err = templBuffer.WriteString(templ.EscapeString(var_12))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			} else {
				var var_13 = []any{classes("item", classIf("active", page.Active))}
				err = templ.RenderCSSItems(ctx, templBuffer, var_13...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<a class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_13).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" href=\"")
				if err != nil {
					return err
				}
				var var_14 templ.SafeURL = templ.SafeURL(page.URL)
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_14)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_15 string = page.Page
				_, err = templBuffer.WriteString(templ.EscapeString(var_15))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func xsrf(state AppState) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_16 := templ.GetChildren(ctx)
		if var_16 == nil {
			var_16 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<input type=\"hidden\" name=\"_xsrf\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(state.XSRFToken()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

// wrappers:

func page(title string, description string, image string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_17 := templ.GetChildren(ctx)
		if var_17 == nil {
			var_17 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"><meta name=\"theme-color\" content=\"#1b1b1b\"><meta http-equiv=\"Content-Security-Policy\" content=\"default-src &#39;self&#39;; img-src &#39;self&#39;; script-src &#39;self&#39;; style-src &#39;self&#39;; require-trusted-types-for &#39;script&#39;; base-uri &#39;self&#39;; form-action &#39;self&#39;\"><link rel=\"icon\" href=\"/favicon.ico\"><title>")
		if err != nil {
			return err
		}
		var var_18 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_18))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_19 := `| creamy-videos`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title><meta property=\"og:type\" content=\"website\"><meta property=\"og:title\" content=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(title))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><meta property=\"twitter:title\" content=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(title))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if description != "" {
			_, err = templBuffer.WriteString("<meta name=\"description\" content=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(description))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"> <meta property=\"og:description\" content=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(description))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"> <meta property=\"twitter:description\" content=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(description))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
		}
		if image != "" {
			_, err = templBuffer.WriteString("<meta property=\"og:image\" content=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(image))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"> <meta property=\"twitter:image\" content=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(image))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<link href=\"/css/semantic.min.0.css\" rel=\"stylesheet\"><link href=\"/css/main.0.css\" rel=\"stylesheet\"><script defer src=\"/js/main.0.js\" type=\"text/javascript\"></script></head><body>")
		if err != nil {
			return err
		}
		err = var_17.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func app(state AppState) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"app\"><div class=\"ui fixed inverted main menu\"><div class=\"ui container\"><a href=\"/\" class=\"header item\"><img class=\"logo\" src=\"/img/icon.png\"> ")
		if err != nil {
			return err
		}
		var_21 := `Creamy Videos`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><a href=\"/\" class=\"item\">")
		if err != nil {
			return err
		}
		var_22 := `Home`
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		if !state.ReadOnly {
			_, err = templBuffer.WriteString("<a href=\"/upload\" class=\"item\">")
			if err != nil {
				return err
			}
			var_23 := `Upload`
			_, err = templBuffer.WriteString(var_23)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<form method=\"GET\" action=\"/search\" class=\"not-small right menu\">")
		if err != nil {
			return err
		}
		if state.Sortable {
			_, err = templBuffer.WriteString("<div class=\"borderless item\">")
			if err != nil {
				return err
			}
			err = sortDropdown(state.SortDirection, false).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<div class=\"borderless item\"><div class=\"search-input ui inverted transparent icon input\"><input aria-label=\"Search\" type=\"text\" placeholder=\"Search...\" name=\"text\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(state.SearchText))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><button type=\"submit\"><i class=\"search link icon\"></i></button></div></div></form></div></div><form method=\"GET\" action=\"/search\"><div class=\"ui only-small fluid fixed inverted menu search\"><div class=\"borderless item\"><div class=\"search-input ui inverted transparent icon input\"><input type=\"text\" placeholder=\"Search...\" name=\"text\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(state.SearchText))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><button type=\"submit\"><i class=\"search link icon\"></i></button></div></div></div><div class=\"ui main container only-small\">")
		if err != nil {
			return err
		}
		if state.Sortable {
			_, err = templBuffer.WriteString("<div class=\"only-small mobile-sort-controls\">")
			if err != nil {
				return err
			}
			err = sortDropdown(state.SortDirection, true).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></form><div class=\"ui main container\">")
		if err != nil {
			return err
		}
		err = var_20.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

// pages:

func Home(state AppState, paging Paging, videos []videostore.Video) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_24 := templ.GetChildren(ctx)
		if var_24 == nil {
			var_24 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_25 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_26 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				err = videoGrid(state.PUG, videos).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				err = pagingLinks(paging).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = app(state).Render(templ.WithChildren(ctx, var_26), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page("Home", "The creamiest selfhosted tubesite", "/img/banner.jpg").Render(templ.WithChildren(ctx, var_25), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Search(state AppState, paging Paging, videos []videostore.Video) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_27 := templ.GetChildren(ctx)
		if var_27 == nil {
			var_27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_28 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_29 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				err = videoGrid(state.PUG, videos).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				err = pagingLinks(paging).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = app(state).Render(templ.WithChildren(ctx, var_29), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page("Search: "+state.SearchText, fmt.Sprintf("Page %v of %v", paging.CurrentPage, paging.Pages), "/img/banner.jpg").Render(templ.WithChildren(ctx, var_28), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func UploadForm(state AppState, videoFormState VideoFormState) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_30 := templ.GetChildren(ctx)
		if var_30 == nil {
			var_30 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_31 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_32 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, err = templBuffer.WriteString("<div class=\"upload ui text container\"><form method=\"POST\" class=\"ui form\" enctype=\"multipart/form-data\">")
				if err != nil {
					return err
				}
				err = xsrf(state).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<div class=\"ui field\"><label>")
				if err != nil {
					return err
				}
				var_33 := `Title`
				_, err = templBuffer.WriteString(var_33)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label><input id=\"txtTitle\" type=\"text\" name=\"title\" placeholder=\"Title\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(videoFormState.Title))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"></div><div class=\"ui field\"><label>")
				if err != nil {
					return err
				}
				var_34 := `Tags (separated by comma)`
				_, err = templBuffer.WriteString(var_34)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"tags\" placeholder=\"educational, computer science, wizardry\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(videoFormState.Tags))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"></div><div class=\"field\"><label>")
				if err != nil {
					return err
				}
				var_35 := `Description`
				_, err = templBuffer.WriteString(var_35)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label><textarea name=\"description\" placeholder=\"Description\">")
				if err != nil {
					return err
				}
				var var_36 string = videoFormState.Description
				_, err = templBuffer.WriteString(templ.EscapeString(var_36))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</textarea></div><div class=\"field\"><label>")
				if err != nil {
					return err
				}
				var_37 := `File`
				_, err = templBuffer.WriteString(var_37)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label><input type=\"file\" name=\"file\" required cv-filename-default-to=\"#txtTitle\"></div>")
				if err != nil {
					return err
				}
				if videoFormState.Error != "" {
					_, err = templBuffer.WriteString("<div class=\"ui visible negative message\"><div class=\"header\">")
					if err != nil {
						return err
					}
					var_38 := `Video upload failed`
					_, err = templBuffer.WriteString(var_38)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div><p>")
					if err != nil {
						return err
					}
					var var_39 string = videoFormState.Error
					_, err = templBuffer.WriteString(templ.EscapeString(var_39))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</p></div>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("<button type=\"submit\" class=\"ui submit button\">")
				if err != nil {
					return err
				}
				var_40 := `Upload`
				_, err = templBuffer.WriteString(var_40)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</button></form></div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = app(state).Render(templ.WithChildren(ctx, var_32), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page("Upload", "Contribute to the creamiest selfhosted tubesite", "/img/banner.jpg").Render(templ.WithChildren(ctx, var_31), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func EditForm(state AppState, videoFormState VideoFormState, video videostore.Video) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_41 := templ.GetChildren(ctx)
		if var_41 == nil {
			var_41 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_42 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_43 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, err = templBuffer.WriteString("<div class=\"upload ui text container\"><form method=\"POST\" class=\"ui form\" enctype=\"multipart/form-data\">")
				if err != nil {
					return err
				}
				err = xsrf(state).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<div class=\"ui field\"><label>")
				if err != nil {
					return err
				}
				var_44 := `Title`
				_, err = templBuffer.WriteString(var_44)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"title\" placeholder=\"Title\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(videoFormState.Title))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"></div><div class=\"ui field\"><label>")
				if err != nil {
					return err
				}
				var_45 := `Tags (separated by comma)`
				_, err = templBuffer.WriteString(var_45)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"tags\" placeholder=\"educational, computer science, wizardry\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(videoFormState.Tags))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"></div><div class=\"field\"><label>")
				if err != nil {
					return err
				}
				var_46 := `Description`
				_, err = templBuffer.WriteString(var_46)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label><textarea name=\"description\" placeholder=\"Description\">")
				if err != nil {
					return err
				}
				var var_47 string = videoFormState.Description
				_, err = templBuffer.WriteString(templ.EscapeString(var_47))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</textarea></div>")
				if err != nil {
					return err
				}
				if videoFormState.Error != "" {
					_, err = templBuffer.WriteString("<div class=\"ui visible negative message\"><div class=\"header\">")
					if err != nil {
						return err
					}
					var_48 := `Video edit failed`
					_, err = templBuffer.WriteString(var_48)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div><p>")
					if err != nil {
						return err
					}
					var var_49 string = videoFormState.Error
					_, err = templBuffer.WriteString(templ.EscapeString(var_49))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</p></div>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("<button type=\"submit\" class=\"ui submit button\">")
				if err != nil {
					return err
				}
				var_50 := `Save`
				_, err = templBuffer.WriteString(var_50)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</button></form></div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = app(state).Render(templ.WithChildren(ctx, var_43), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page(fmt.Sprintf("Edit %v", video.Title), video.Description, state.PUG(video.Thumbnail)).Render(templ.WithChildren(ctx, var_42), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func DeleteForm(state AppState, videoFormState VideoFormState, video videostore.Video) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_51 := templ.GetChildren(ctx)
		if var_51 == nil {
			var_51 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_52 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_53 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, err = templBuffer.WriteString("<div class=\"upload ui text container\"><form method=\"POST\" class=\"ui form\" enctype=\"multipart/form-data\">")
				if err != nil {
					return err
				}
				err = xsrf(state).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<p>")
				if err != nil {
					return err
				}
				var_54 := `Are you sure you want to delete `
				_, err = templBuffer.WriteString(var_54)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<strong>")
				if err != nil {
					return err
				}
				var var_55 string = video.Title
				_, err = templBuffer.WriteString(templ.EscapeString(var_55))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</strong>")
				if err != nil {
					return err
				}
				var_56 := `?`
				_, err = templBuffer.WriteString(var_56)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p>")
				if err != nil {
					return err
				}
				if videoFormState.Error != "" {
					_, err = templBuffer.WriteString("<div class=\"ui visible negative message\"><div class=\"header\">")
					if err != nil {
						return err
					}
					var_57 := `Video delete failed`
					_, err = templBuffer.WriteString(var_57)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div><p>")
					if err != nil {
						return err
					}
					var var_58 string = videoFormState.Error
					_, err = templBuffer.WriteString(templ.EscapeString(var_58))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</p></div>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("<button type=\"submit\" class=\"ui submit negative button\">")
				if err != nil {
					return err
				}
				var_59 := `Delete`
				_, err = templBuffer.WriteString(var_59)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</button></form></div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = app(state).Render(templ.WithChildren(ctx, var_53), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page(fmt.Sprintf("Delete %v", video.Title), video.Description, state.PUG(video.Thumbnail)).Render(templ.WithChildren(ctx, var_52), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Watch(state AppState, video videostore.Video) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_60 := templ.GetChildren(ctx)
		if var_60 == nil {
			var_60 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_61 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_62 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, err = templBuffer.WriteString("<div class=\"watch\"><div class=\"ui vertical segment\"><div class=\"ui center aligned fluid video container\"><video src=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(state.PUG(video.Source)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" controls autoplay></video></div></div><div class=\"ui vertical segment\"><span aria-label=\"Video Title\" class=\"header\">")
				if err != nil {
					return err
				}
				var var_63 string = video.Title
				_, err = templBuffer.WriteString(templ.EscapeString(var_63))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span><p aria-label=\"Video Description\" class=\"description\">")
				if err != nil {
					return err
				}
				var var_64 string = video.Description
				_, err = templBuffer.WriteString(templ.EscapeString(var_64))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p><div class=\"ui right floated buttons\"><a class=\"ui basic inverted icon download button\" download=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(video.OriginalFileName))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" href=\"")
				if err != nil {
					return err
				}
				var var_65 templ.SafeURL = templ.SafeURL(state.PUG(video.Source))
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_65)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"><i class=\"download icon\"></i> ")
				if err != nil {
					return err
				}
				var_66 := `Download`
				_, err = templBuffer.WriteString(var_66)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a>")
				if err != nil {
					return err
				}
				if !state.ReadOnly {
					_, err = templBuffer.WriteString("<a cv-confirm=\"#formDelete\" class=\"ui basic red icon delete button\" href=\"")
					if err != nil {
						return err
					}
					var var_67 templ.SafeURL = videoDeleteURL(video)
					_, err = templBuffer.WriteString(templ.EscapeString(string(var_67)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"><i class=\"trash icon\"></i> ")
					if err != nil {
						return err
					}
					var_68 := `Delete`
					_, err = templBuffer.WriteString(var_68)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</a> <form id=\"formDelete\" method=\"POST\" action=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/delete/%v", video.ID)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					err = xsrf(state).Render(ctx, templBuffer)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</form> <a class=\"ui basic yellow icon edit button\" href=\"")
					if err != nil {
						return err
					}
					var var_69 templ.SafeURL = videoEditURL(video)
					_, err = templBuffer.WriteString(templ.EscapeString(string(var_69)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"><i class=\"edit icon\"></i> ")
					if err != nil {
						return err
					}
					var_70 := `Edit`
					_, err = templBuffer.WriteString(var_70)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</a>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</div><div aria-label=\"Video Tags\" class=\"tags\">")
				if err != nil {
					return err
				}
				for _, tag := range video.Tags {
					_, err = templBuffer.WriteString("<a class=\"ui label\" href=\"")
					if err != nil {
						return err
					}
					var var_71 templ.SafeURL = tagSearchURL(tag)
					_, err = templBuffer.WriteString(templ.EscapeString(string(var_71)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					var var_72 string = tag
					_, err = templBuffer.WriteString(templ.EscapeString(var_72))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</a>")
					if err != nil {
						return err
					}
					var_73 := `&nbsp;`
					_, err = templBuffer.WriteString(var_73)
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</div></div></div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = app(state).Render(templ.WithChildren(ctx, var_62), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page(video.Title, video.Description, state.PUG(video.Thumbnail)).Render(templ.WithChildren(ctx, var_61), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ErrorPage(state AppState, message string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_74 := templ.GetChildren(ctx)
		if var_74 == nil {
			var_74 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_75 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_76 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, err = templBuffer.WriteString("<div class=\"ui visible negative message\"><div class=\"header\">")
				if err != nil {
					return err
				}
				var_77 := `Something broke`
				_, err = templBuffer.WriteString(var_77)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div><p>")
				if err != nil {
					return err
				}
				var var_78 string = message
				_, err = templBuffer.WriteString(templ.EscapeString(var_78))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p></div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = app(state).Render(templ.WithChildren(ctx, var_76), templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = page("Error", "", "/img/banner.jpg").Render(templ.WithChildren(ctx, var_75), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
